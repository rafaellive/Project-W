using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Sabio.Models;
using Sabio.Models.Domain;
using Sabio.Models.Requests.UserProfiles;
using Sabio.Models.Requests.Users;
using Sabio.Services;
using Sabio.Services.Interfaces;
using Sabio.Web.Controllers;
using Sabio.Web.Models.Responses;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace Sabio.Web.Api.Controllers
{
    [Route("api/users/profiles")]
    [ApiController]
    public class UserProfileApiController : BaseApiController
    {
        private IAuthenticationService<int> _authService;
        private IUserProfileService _service = null;

        public UserProfileApiController(IAuthenticationService<int> authService,IUserProfileService service, ILogger<UserProfileApiController> logger) : base(logger)
        {
            _service = service;
            _authService = authService;
        }

        [HttpPost]
        public ActionResult<ItemResponse<int>> Create(UserProfileAddRequest model)
            
        {
            ObjectResult result = null;
            try 
            {
                int userId = _authService.GetCurrentUserId();
                int id = _service.Add(model, userId);

                ItemResponse<int> response = new ItemResponse<int>() { Item = id };

                response.Item = id;

                result = Created201(response);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex.ToString());
                ErrorResponse response = new ErrorResponse(ex.Message);

                result = StatusCode(500, response);
            }
            return result;
        }

        [HttpGet("current")]
        public ActionResult<ItemResponse<UserProfile>> Get()
        {
            try
            {
                int userId = _authService.GetCurrentUserId();
                UserProfile up = _service.Get(userId);

                ItemResponse<UserProfile> response = new ItemResponse<UserProfile>();
                response.Item = up;

                if (response.Item == null)
                {
                    return NotFound404(response);
                }
                else
                {
                    return Ok(response);
                }
            }
            catch (Exception ex)
            {
                base.Logger.LogError(ex.ToString());
                return base.StatusCode(500, new ErrorResponse($"Generic Error: ${ex.Message}"));

            }

        }

        [HttpGet("paginate")]
        public ActionResult<ItemResponse<Paged<UserProfile>>> GetPaginate(int pageIndex, int pageSize)
        {
            int iCode = 200;
            BaseResponse response = null;

            try
            {
                Paged<UserProfile> paged = _service.GetPaginate(pageIndex, pageSize);

                if (paged == null)
                {
                    iCode = 404;
                    response = new ErrorResponse("Profiles not found.");
                }
                else
                {
                    response = new ItemResponse<Paged<UserProfile>> { Item = paged };
                   
                }
            }
            catch (Exception ex)
            {
                iCode = 500;               
                response =  new ErrorResponse(ex.Message); 
                base.Logger.LogError(ex.ToString());
            }

            return StatusCode(iCode, response);
        }

        [HttpPut("current")]
        public ActionResult<SuccessResponse> Update(UserProfileUpdateRequest model)
        {
            try
            {
                int userId = _authService.GetCurrentUserId();
                _service.Update(model, userId);

                SuccessResponse response = new SuccessResponse();

                return Ok(response);
            }

            catch (Exception ex)
            {
                base.Logger.LogError(ex.ToString());
                return base.StatusCode(500, new ErrorResponse($"Generic Error: ${ex.Message}"));

            }
        } 
    }
}
